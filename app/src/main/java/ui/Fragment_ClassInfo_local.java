package ui;import android.app.Fragment;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ArrayAdapter;import android.widget.ListView;import com.yuhang.classplus.ClassRoom;import com.yuhang.classplus.Course;import com.yuhang.classplus.R;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.HashMap;import java.util.Map;import cn.duan.DataProcessor;/** * Created by 宇航 on 2016/10/4. * */public class Fragment_ClassInfo_local extends Fragment{    private ListView listView_classInfo_item;    private ListView listView_classInfo_course;    private ListView listView_classInfo_teacherName;    ArrayList<String> listOfCourse;    ArrayList<String> listOfTeacherName;    Course[] originalCourses;    Course[] sortedCourses;    private ArrayList<String> list = new ArrayList<>();    ClassRoom classRoom = new ClassRoom();    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        View rootView = inflater.inflate(R.layout.fragment_class_info, container,false);        init(rootView);        listView_classInfo_item.setAdapter(getAdapter());        loadData();        Handler handler = new Handler(){            @Override            public void handleMessage(Message msg) {                super.handleMessage(msg);                if(msg.what == 0){                    Map<String,ArrayList<String>> map = (Map<String, ArrayList<String>>) msg.obj;                    listOfCourse = map.get("listOfCourseName");                    listOfTeacherName = map.get("listOfTeacherName");                    ArrayAdapter<String> arrayAdapterOfCourse = new ArrayAdapter<>(getActivity(), R.layout.text_view_class_time_table, listOfCourse);                    ArrayAdapter<String> arrayAdapterOfTeacherName = new ArrayAdapter<>(getActivity(), R.layout.text_view_class_time_table, listOfTeacherName);                    listView_classInfo_course.setAdapter(arrayAdapterOfCourse);                    listView_classInfo_teacherName.setAdapter(arrayAdapterOfTeacherName);                }else{                    Log.i("ClassInfo", "error: msg isn't 0");                }            }        };        return rootView;    }    //  运行子线程获取课程信息    private void loadData() {        new Thread(new Runnable() {            @Override            public void run() {                JSONObject response = null;                Map<String, ArrayList<String>> map = new HashMap<>();                try {                    response = getResponse();                } catch (JSONException e) {                    Log.i("ClassInfo", "error in getResponse");                    e.printStackTrace();                }                originalCourses = getCourses(response); //get the course array with length 5                sortedCourses = sortCourses(originalCourses);   //sort the array,return sorted array of course                System.out.println(getListOfCourseName(sortedCourses).toString());                System.out.println(getListOfTeacherName(sortedCourses).toString());                Message message = new Message();                message.what = 0;                map.put("listOfTeacherName",getListOfCourseName(sortedCourses));                map.put("listOfCourseName", getListOfTeacherName(sortedCourses));                message.obj = map;            }            private ArrayList<String> getListOfTeacherName(Course[] sortedCourses) {                ArrayList<String> listOfTeacherName = new ArrayList<>();                for (Course course:sortedCourses) {                    listOfTeacherName.add(course.getTeacherName());                }                return listOfTeacherName;            }            private ArrayList<String> getListOfCourseName(Course[] sortedCourses) {                ArrayList<String> listOfCourseName = new ArrayList<>();                for (Course course:sortedCourses) {                    listOfCourseName.add(course.getCourseName());                }                return listOfCourseName;            }            // Sort the original data of course            private Course[] sortCourses(Course[] courses) {                Course[] sortedCourse = new Course[5];                for (int i = 0; i < courses.length; i++) {                    switch (courses[i].getPos()){                        case "1":                            sortedCourse[0] = courses[i];                            break;                        case "2":                            sortedCourse[1] = courses[i];                            break;                        case "3":                            sortedCourse[2] = courses[i];                            break;                        case "4":                            sortedCourse[3] = courses[i];                            break;                        case "5":                            sortedCourse[4] = courses[i];                            break;                        default:                            sortedCourse[i] = null;                    }                }                return sortedCourse;            }            // return a course with length 5 from response            private Course[] getCourses(JSONObject response) {                Course[] courses = new Course[5];                try {                    JSONArray courseInfos= response.getJSONArray("courses");                    for (int i = 0; i < 5; i++) {                        courses[i] = new Course();                        if (courseInfos.getJSONObject(i) == null) {                            courses[i].setPos("");                            courses[i].setTeacherName("");                            courses[i].setCourseName("");                        }else {                            JSONObject courseInfo = courseInfos.getJSONObject(i);                            courses[i].setPos(courseInfo.getString("pos"));                            courses[i].setCourseName(courseInfo.getString("name"));                            courses[i].setTeacherName(courseInfo.getString("teacher"));                        }                    }                } catch (JSONException e) {                    e.printStackTrace();                }                return courses;            }            private JSONObject getResponse() throws JSONException {                return new JSONObject(DataProcessor.getData("G103"));            }        }).start();    }    //  加载时间列表项的adapter    ArrayAdapter<String> getAdapter(){        ArrayAdapter<String> arrayAdapter = new ArrayAdapter<>(getActivity(),R.layout.text_view_class_time_table,list);        list.add("1\n\n2");        list.add("3\n\n4");        list.add("5\n\n6");        list.add("7\n\n8");        list.add("9\n\n10");        return arrayAdapter;    }    private void init(View rootView) {        listView_classInfo_item = (ListView) rootView.findViewById(R.id.listView_classInfo_item);        listView_classInfo_course = (ListView) rootView.findViewById(R.id.listView_courseName);        listView_classInfo_teacherName = (ListView) rootView.findViewById(R.id.listView_teacherName);    }}